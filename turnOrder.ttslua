enable = false
function onLoad()
  setInitiativePositions()
  setInitiativeMeterPanels()
  setInitiativeNameMeterPanels()
  setInitiativeDice()
  setInitiativeInitiativeMeterPanels()
  setInitiativeBaddieTypeMeterPanels()
  setInitiativeGearlockTypeMeterPanels()
  initializeInitiativeTracker()
  setEndTurnButtons()
end

function initializeInitiativeTracker()
  setInitiativeTableLayout()
  click = true
  set = "asd"

  UI.setXmlTable({
    {
      tag="TableLayout",
      attributes={
        id="InitiativeTracker",
        active=false,
        offsetXY="-25 -50",
        childForceExpandWidth=false,
        width=200,
        rectAlignment="UpperRight",
        columnWidths="50 150",
      },
      children={
        initiativeTableLayout[1],
        initiativeTableLayout[2],
        initiativeTableLayout[3],
        initiativeTableLayout[4],
        initiativeTableLayout[5],
        initiativeTableLayout[6],
        initiativeTableLayout[7],
        initiativeTableLayout[8],
        {
          tag="Row",
          attributes={
            id="StartCombat",
            childForceExpandWidth=false,
            dontUseTableRowBackground="true",
            color="orange"
          },
          children={
            {
              tag="Button",
              attributes={
                dontUseTableCellBackground=true,
                color="#fff0f000",
                onClick = "0dc670/startCombat(set)",
                text="Start Combat"
              }
            }
          }
        }
      }
    }
  })
end

function setInitiativeTableLayout()
  initiativeTableLayout = {{},{},{},{},{},{},{},{},}
  for i = 1, 8 do
    initiativeTableLayout[i] = {
      tag="Row",
      attributes={
        id="initiative-" .. i,
        childForceExpandWidth=false,
        dontUseTableRowBackground="true",
      },
      children={
        {
          tag="Cell",
          attributes={
            dontUseTableCellBackground=true,
            color="blue"
          },
          children={
            {
              tag="Button",
              attributes={
                id="endTurnButton-" ..i,
                active=false,
                dontUseTableCellBackground=true,
                color="#fff0f000",
                onClick = "0dc670/endTurn()",
                text="X"
              }
            }
          }
        },
        {
          tag="Cell",
          attributes={
            id="setType-" .. i,
            dontUseTableCellBackground=true,
          },
          children={
            {
              tag="VerticalLayout",
              children={
                {
                  tag="Text",
                  attributes={
                    id="initiative-" .. i .. "-name",
                    fontSize=13,
                    color="white",
                  },
                },
                {
                  tag="Text",
                  attributes={
                    id="initiative-" .. i .. "-initiative",
                    fontSize=13,
                    width="100",
                    color="white",
                  },
                }
              }
            }
          }
        }
      }
    }
  end
end

function setInitiativeMeterPanels()
  initiativeMeterPanels = {
    "initiative-1","initiative-2","initiative-3","initiative-4","initiative-5","initiative-6","initiative-7","initiative-8",
  }
end

function setInitiativeNameMeterPanels()
  initiativeNameMeterPanels = {
    "initiative-1-name","initiative-2-name","initiative-3-name","initiative-4-name","initiative-5-name","initiative-6-name","initiative-7-name","initiative-8-name",
  }
end

function setInitiativeInitiativeMeterPanels()
  initiativeInitiativeMeterPanels = {
    "initiative-1-initiative","initiative-2-initiative","initiative-3-initiative","initiative-4-initiative","initiative-5-initiative","initiative-6-initiative","initiative-7-initiative","initiative-8-initiative",
  }
end

function setInitiativeBaddieTypeMeterPanels()
  initiativeBaddieTypeMeterPanels = {
    "initiative-baddie-1","initiative-baddie-2","initiative-baddie-3","initiative-baddie-4","initiative-baddie-5","initiative-baddie-6","initiative-baddie-7","initiative-baddie-8",
  }
end

function setInitiativeGearlockTypeMeterPanels()
  initiativeGearlockTypeMeterPanels = {
    "initiative-gearlock-1","initiative-gearlock-2","initiative-gearlock-3","initiative-gearlock-4","initiative-gearlock-5","initiative-gearlock-6","initiative-gearlock-7","initiative-gearlock-8",
  }
end

function setEndTurnButtons()
  endTurnButtons = {
    "endTurnButton-1","endTurnButton-2","endTurnButton-3","endTurnButton-4","endTurnButton-5","endTurnButton-6","endTurnButton-7","endTurnButton-8",
  }
end

function startCombat(player, set)
  setIninitiativeMeter = getObjectFromGUID('8d4497')
  initiativeMeterDice = setIninitiativeMeter.getTable('initiativeMeterDice')
  if set == 'set' then
    UI.setAttribute('initiative-baddie-1', "color", "pink")
    UI.setAttribute('initiative-gearlock-1', "color", "pink")
    UI.setAttribute(endTurnButtons[1], "active", true)
    msg = "Everything is set. The first combat round starts with " .. JSON.decode(initiativeMeterDice[1].getGMNotes()).name
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
    height = height - 50
    UI.setAttribute("InitiativeTracker", "height", height)
    UI.setAttribute('StartCombat', "active", false)
  end
end

activePlayer = 1
nextActivationPanel = 1
activePanels = 0
round = 1
function endTurn()
  initiativeMeterDice = setIninitiativeMeter.getTable('initiativeMeterDice')
  for i = 1, 8 do
    if UI.getAttribute(initiativeMeterPanels[i], 'active') == 'True' then
      activePanels = activePanels + 1
    end
  end
  for i = activePlayer, #initiativeMeterDice do
    if activePlayer >= #initiativeMeterDice then
      nextRound()
      return
    elseif activePlayer < #initiativeMeterDice then
      if UI.getAttribute(initiativeMeterPanels[nextActivationPanel + 1], 'active') == 'True' then
        UI.setAttribute('initiative-baddie-' .. nextActivationPanel, "color", "grey")
        UI.setAttribute('initiative-gearlock-' .. nextActivationPanel, "color", "grey")
        UI.setAttribute(endTurnButtons[nextActivationPanel], "active", false)
        UI.setAttribute('initiative-baddie-' .. nextActivationPanel + 1, "color", "pink")
        UI.setAttribute('initiative-gearlock-' .. nextActivationPanel + 1, "color", "pink")
        UI.setAttribute(endTurnButtons[nextActivationPanel  + 1], "active", true)
        activePlayer = activePlayer + 1
        nextActivationPanel = nextActivationPanel + 1
        break

      elseif UI.getAttribute(initiativeMeterPanels[i + 1], 'active') == 'False' then

        for i, initiativeMeterPanel in ipairs(initiativeMeterPanels) do
          if i > nextActivationPanel then
            nextActivation = UI.getAttribute(initiativeMeterPanel, 'active')
            if nextActivation == 'True' then
              for i = 1, activePlayer do
                UI.setAttribute('initiative-baddie-' .. nextActivationPanel , "color", "grey")
                UI.setAttribute('initiative-gearlock-' .. nextActivationPanel , "color", "grey")
                UI.setAttribute(endTurnButtons[nextActivationPanel], "active", false)
              end
              UI.setAttribute('initiative-baddie-' .. nextActivationPanel + 1, "color", "pink")
              UI.setAttribute('initiative-gearlock-' .. nextActivationPanel + 1, "color", "pink")
              UI.setAttribute(endTurnButtons[nextActivationPanel + 1], "active", true)
              activePlayer = activePlayer + 1
              nextActivationPanel = nextActivationPanel + 1
              activePanels = 0
              return
            elseif nextActivation == 'False' then
              UI.setAttribute('initiative-baddie-' .. nextActivationPanel, "color", "grey")
              UI.setAttribute('initiative-gearlock-' .. nextActivationPanel, "color", "grey")
              UI.setAttribute(endTurnButtons[nextActivationPanel], "active", false)
              nextActivationPanel = nextActivationPanel + 1
              if activePlayer > #initiativeMeterDice then
                nextRound()
                return
              end
            end
          end
        end

      end
    end
  end

  -- for i = 1, activePlayer do
  --   UI.setAttribute('initiative-baddie-' .. i, "color", "grey")
  --   UI.setAttribute('initiative-gearlock-' .. i, "color", "grey")
  --   UI.setAttribute(endTurnButtons[i], "active", false)
  -- end
  -- activePlayer = activePlayer + 1
  activePanels = 0
end

function nextRound()
  checkEmptyInitiativeMeterSpots()
  battleQueue = getObjectFromGUID('f45442')
  --Wait for checkEmptyInitiativeMeterSpots to be finished

  moveWatch = function() return lastInitiativeDie.isSmoothMoving() end
  Wait.condition(function() battleQueue.call('checkForEmptyLanes') end, moveWatch)

  activePlayer = 1
  nextActivationPanel = 1
  msg = "Beginning of round " .. round
  rgb = {r=0, g=1, b=0}
  broadcastToAll(msg, rgb)

  if round >= 5 then
    msg = "Everyone takes on point of real damage"
    rgb = {r=1, g=0, b=0}
    broadcastToAll(msg, rgb)
  end
  round = round + 1
  msg = "Start of round " .. round
  rgb = {r=0, g=1, b=0}
  broadcastToAll(msg, rgb)
  roundDie = getObjectFromGUID('95be0e')
  roundDie.setValue(round)

  for i = 1, 8 do
    UI.setAttribute('initiative-baddie-' .. i, "color", "purple")
    UI.setAttribute('initiative-gearlock-' .. i, "color", "green")
    UI.setAttribute('initiative-baddie-1', "color", "pink")
    UI.setAttribute('initiative-gearlock-1', "color", "pink")
    UI.setAttribute(endTurnButtons[1], "active", true)

    if i > 1 then
      local getX = function() UI.setAttribute(endTurnButtons[i], "active", false) end
      Wait.frames(getX, 1)
    end
  end

  if activePlayer == 1 then
    UI.setAttribute('initiative-baddie-1', "color", "pink")
    UI.setAttribute('initiative-gearlock-1' .. 1, "color", "pink")
    UI.setAttribute(endTurnButtons[1], "active", true)
    local setAttr = function() UI.setAttribute(initiativeGearlockTypeMeterPanels[1], "color", "pink") end
    Wait.frames(setAttr, 1)
    local setAttr = function() UI.setAttribute(initiativeBaddieTypeMeterPanels[1], "color", "pink") end
    Wait.frames(setAttr, 1)
  end
end

function checkEmptyInitiativeMeterSpots()
  initiativeMeterDice = setIninitiativeMeter.getTable('initiativeMeterDice')
  lastInitiativeDie = initiativeMeterDice[#initiativeMeterDice]
  for i = 1, 9 do
    isEmpty = (findHitsInRadius(initiativePositions[i].getPosition(), 0.8, 1.5, 'die') == nil)
    if isEmpty == true then
      emptySpot = i
      nextEmptySpot = nextFilledInitiativeMeterSpot(emptySpot)
      if nextEmptySpot ~= nil then
        pos = initiativePositions[i].getPosition(emptySpot)
        pos.y = pos.y + 1
        nextEmptySpot[2].setPositionSmooth(pos)

        moveWatch = function() return not nextEmptySpot[2].isSmoothMoving() end
        Wait.condition(function() checkEmptyInitiativeMeterSpots() end, moveWatch)
      end
      break
    end
  end
end

function nextFilledInitiativeMeterSpot(emptySpot)
  for i = emptySpot, 9 do
    initiativeDie = findHitsInRadius(initiativePositions[i].getPosition(), 0.8, 1.5, 'die')
    isEmpty = (initiativeDie == nil)
    if isEmpty ~= true then
      return {i, initiativeDie}
    end
  end
end

function dieRemoved(intitiativeDie)
  if JSON.decode(intitiativeDie.getGMNotes()).initiativePanel < activePlayer then
    activePlayer = activePlayer -1
  end
  initiativeTrackerPanel = JSON.decode(intitiativeDie.getGMNotes()).initiativePanel
  UI.setAttribute(initiativeMeterPanels[initiativeTrackerPanel], "active", false)
  height = height - 50
  UI.setAttribute("InitiativeTracker", "height", height)
  if UI.getAttribute(endTurnButtons[initiativeTrackerPanel], "active") == "True" then
    for i = initiativeTrackerPanel + 1, #initiativeMeterDice do
      if UI.getAttribute(initiativeMeterPanels[i], 'active') == 'True' then
        activePlayer = activePlayer + 1
        UI.setAttribute('initiative-baddie-' .. i, "color", "pink")
        UI.setAttribute('initiative-gearlock-' .. i, "color", "pink")
        UI.setAttribute(endTurnButtons[i], "active", true)
        break
      end
    end
    if initiativeTrackerPanel + 1 > #initiativeMeterDice then
      nextRound()
      return
    end
  end
end

setInitiativeTracker = 0
function updateInitiativeMeter(initiativeMeterDice)
  setInitiativeTracker = setInitiativeTracker + 1
  if setInitiativeTracker == 1 then
    UI.setAttribute("InitiativeTracker", "active", true)
  end
  height = 50
  for i, initiativeMeterDie in ipairs(initiativeMeterDice) do
    tokenType = JSON.decode(initiativeMeterDie.getGMNotes()).type
    initiativeMeterDie.setGMNotes(JSON.encode({
      initiativePanel = i,
      originalPosition = Vector(JSON.decode(initiativeMeterDie.getGMNotes()).originalPosition),
      value = JSON.decode(initiativeMeterDie.getGMNotes()).value,
      type = tokenType,
      name = JSON.decode(initiativeMeterDie.getGMNotes()).name
    }))
    UI.setAttribute('setType-'.. i, 'id', 'initiative-' .. tokenType .. '-' .. i)
    if tokenType == 'baddie' then
      if UI.getAttribute('initiative-baddie-' .. i, "id") == nil then
        UI.setAttribute('initiative-gearlock-' .. i, "id", 'initiative-baddie-' .. i, "id")
      end
    elseif tokenType == 'gearlock' then
      if UI.getAttribute('initiative-gearlock-' .. i, "id") == nil then
        UI.setAttribute('initiative-baddie-' .. i, "id", 'initiative-gearlock-' .. i, "id")
      end
    end

    if tokenType == 'baddie' then
      local setAttr = function() UI.setAttribute('initiative-baddie-' .. i, "color", "purple") end
      Wait.frames(setAttr, 1)
    elseif tokenType == 'gearlock' then
      local setAttr = function() UI.setAttribute(initiativeGearlockTypeMeterPanels[i], "color", "green") end
      Wait.frames(setAttr, 1)
    end

    if activePlayer == 1 then
      if tokenType == 'baddie' then
        local setAttr = function() UI.setAttribute('initiative-baddie-1', "color", "pink") end
        Wait.frames(setAttr, 1)
      elseif tokenType == 'gearlock' then
        local setAttr = function() UI.setAttribute(initiativeGearlockTypeMeterPanels[1], "color", "pink") end
        Wait.frames(setAttr, 1)
      end
    end

    height = height + 50
    UI.setAttribute("InitiativeTracker", "height", height)

    UI.setAttribute(initiativeMeterPanels[i], "active", true)
    UI.setAttribute(initiativeNameMeterPanels[i], "text", JSON.decode(initiativeMeterDie.getGMNotes()).name)
    UI.setAttribute(initiativeInitiativeMeterPanels[i], "text", 'Initiative: ' .. JSON.decode(initiativeMeterDie.getGMNotes()).value)

    UI.setAttribute(initiativeNameMeterPanels[i], "fontSize", 12)
    UI.setAttribute(initiativeInitiativeMeterPanels[i], "fontSize", 12)
  end
  for i = 8, #initiativeMeterDice + 1, -1 do
    UI.setAttribute(initiativeMeterPanels[i], "active", false)
  end

  if tokenType == 'baddie' then
    local setAttr = function() UI.setAttribute('initiative-baddie-1', "color", "pink") end
    Wait.frames(setAttr, 1)
  elseif tokenType == 'gearlock' then
    local setAttr = function() UI.setAttribute('initiative-gearlock-1', "color", "pink") end
    Wait.frames(setAttr, 1)
  end
end

function onObjectLeaveScriptingZone(zone, obj)
  setIninitiativeMeter = getObjectFromGUID('8d4497')
  if zone.getGUID() == '8337ae' then
    for i, InitiativeDie in ipairs(InitiativeDice) do
      if obj.getGUID() == InitiativeDie then
        dieRemoved(obj)
        setIninitiativeMeter.call('removeDieFromInitiativeMeterDice', obj)
      end
    end
  end
end

function onObjectEnterScriptingZone(zone, obj)
  setIninitiativeMeter = getObjectFromGUID('8d4497')
  if zone.getGUID() == '47ef9a' and enable == true then
    for i, InitiativeDie in ipairs(InitiativeDice) do
      if obj.getGUID() == InitiativeDie then
        local moveChips = function() setIninitiativeMeter.call('addDieFromInitiativeMeter') end
        moveWatch = function() return obj.resting end
        Wait.condition(moveChips, moveWatch)
      end
    end
  end
end

self.setPosition({10, -1, 0.7})
function setInitiativeDice()
  InitiativeDice = {
    '7c1582',
    '4d2834',
    '3aaaf7',
    '28d12b',
    '96b1fa',
    'f4f615',
    'ef8dcc',
    '85c726',
    'eef847',
    '545238',
    '73e679'
  }
end

function setInitiativePositions()
  initiativePositions = {
    getObjectFromGUID('fdab05'),
    getObjectFromGUID('7ab4bb'),
    getObjectFromGUID('634099'),
    getObjectFromGUID('7ad94b'),
    getObjectFromGUID('01124a'),
    getObjectFromGUID('6bda36'),
    getObjectFromGUID('dffb26'),
    getObjectFromGUID('e86414'),
    getObjectFromGUID('1dcd7e')
  }
end


function findHitsInRadius(pos, ypos, size, reason)
  pos.y = 0.6
  pos.y = pos.y + ypos
  local radius = (radius or 1)
  local hitList = Physics.cast({
      origin       = {x=pos.x, y=pos.y, z=pos.z},
      direction    = {0,1,0},
      type         = 3,
      size         = {0.5,0.5,0.5},
      max_distance = 0,
      debug        = false,
  })
  pos.y = 1
  for _, hit in ipairs(hitList) do
    if reason == 'die' then
      return hit.hit_object
    end
  end
end
