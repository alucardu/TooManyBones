function onScriptingButtonDown(index, color)
  setSelectedPlayers()
  setReturnDiceZones()
  laneToken = nil
  baddie = nil
  gearlock = nil
  ally = nil
  healthStack = nil

  if Player[color].getHoverObject() ~= nil  and Player[color].getHoverObject().getName() ~= "Battlemat" then
    laneToken = getLaneToken(Player[color].getHoverObject().getPosition())
    baddie = getBaddieToken(Player[color].getHoverObject().getPosition())
    gearlock = getGearlockToken(Player[color].getHoverObject().getPosition())
    ally = getAllyToken(Player[color].getHoverObject().getPosition())
    healthStack = getHealthStack(Player[color].getHoverObject().getPosition())
  end

  if laneToken == nil and gearlock == nil and baddie == nil and ally == nil then
    takeParams = {
      position = Player[color].getPointerPosition(),
      smooth = false,
    }
    healthBag = getObjectFromGUID('228196')
    for i = 1, index do
      healthBag.takeObject(takeParams)
    end
    msg = "Spawned " .. index .. " health tokens."
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
  end

  if laneToken ~= nil then
  end

  if gearlock ~= nil then
  end

  if baddie ~= nil then
    updatedHealth = JSON.decode(baddie.getGMNotes()).updatedHealth
  end
  if healthStack ~= nil then
    if gearlock ~= nil then
      baddie = removeHealthTokenFromGearlock(healthStack, index, gearlock)
    elseif baddie ~= nil then
      baddie = removeHealthTokenFromBaddie(healthStack, index, baddie)
    elseif ally ~= nil then
      ally = removeHealthTokenFromAlly(healthStack, index, ally)
    end
  end

  laneToken = nil
  baddie = nil
  gearlock = nil
  healthStack = nil
end

function spawnHealthToken()
  print(Player[color].getPointerPosition())
end

function removeHealthTokenFromGearlock(healthStack, index, gearlock)
  takeParams = {
    smooth = false,
    callback_function = function(obj) take_callback(obj) end,
  }
  for i = 1, index do
    if healthStack.getQuantity() <= 0 then
      healthStack.destruct()
      msg = JSON.decode(gearlock.getGMNotes()).name .. " has been knocked out!"
      rgb = {r=1, g=0, b=0}
      broadcastToAll(msg, rgb)
      gearlock.setPositionSmooth(JSON.decode(gearlock.getGMNotes()).originalPosition)

      GearlockInitiativeDie = getObjectFromGUID(JSON.decode(gearlock.getGMNotes()).gearlockInitiativeDie)
      GearlockInitiativeDiePosition = JSON.decode(GearlockInitiativeDie.getGMNotes()).originalPosition
      GearlockInitiativeDie.setPositionSmooth(GearlockInitiativeDiePosition)
      return
    end
    healthStack.takeObject(takeParams)
  end
  if healthStack.getQuantity() > 0 then
    msg = "Removed " .. index .." health from " .. JSON.decode(gearlock.getGMNotes()).name .. " " .. healthStack.getQuantity() .. " health remaining!"
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
  end
  gearlock.setDescription("Health is " .. healthStack.getQuantity())
end

function removeHealthTokenFromAlly(healthStack, index, ally)
  takeParams = {
    smooth = false,
    callback_function = function(obj) take_callback(obj) end,
  }
  for i = 1, index do
    if healthStack.getQuantity() < 0 then
      healthStack.destruct()
    end
    healthStack.takeObject(takeParams)
  end
  if healthStack.getQuantity() > 0 then
    msg = "Removed " .. index .." health from " .. JSON.decode(ally.getGMNotes()).name .. " " .. healthStack.getQuantity() .. " health remaining!"
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
  elseif healthStack.getQuantity() <= 0 then
    msg = "Removed " .. index .." health from " .. JSON.decode(ally.getGMNotes()).name .. " and " .. JSON.decode(ally.getGMNotes()).name .. " Has been defeated!"
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
    for i, playerSelected in ipairs(selectedPlayers) do
      print(playerSelected, JSON.decode(ally.getGMNotes()).owner)
      if playerSelected == JSON.decode(ally.getGMNotes()).owner then
        ally = ally
        pos = returnDiceZones[i].getPosition()
        ally.setPositionSmooth(pos)
        pos.x = pos.x - 1.5
        allyDie = getObjectFromGUID(JSON.decode(ally.getGMNotes()).initiativeDie)
        allyDie.setPositionSmooth(pos)
      end
    end
  end
  ally.setDescription("Health is " .. (healthStack.getQuantity()))
end

function removeHealthTokenFromBaddie(healthStack, index, baddie)
  takeParams = {
    smooth = false,
    callback_function = function(obj) take_callback(obj) end,
  }
  for i = 1, index do
    if healthStack.getQuantity() < 0 then
      healthStack.destruct()
    end
    healthStack.takeObject(takeParams)
  end

  guid = JSON.decode(baddie.getGMNotes()).guid
  initiative = JSON.decode(baddie.getGMNotes()).initiative
  health = JSON.decode(baddie.getGMNotes()).health
  attack = JSON.decode(baddie.getGMNotes()).attack
  name = JSON.decode(baddie.getGMNotes()).name
  baddiePoints = JSON.decode(baddie.getGMNotes()).baddiePoints

  baddie.setGMNotes(JSON.encode({
    guid = guid,
    attack = attack,
    initiative = initiative,
    health = health,
    updatedHealth = updatedHealth - index,
    name = name,
    baddiePoints = baddiePoints,
    type = JSON.decode(baddie.getGMNotes()).type
  }))
  if JSON.decode(baddie.getGMNotes()).health > 0 then
    msg = "Removed " .. index .." health from " .. JSON.decode(baddie.getGMNotes()).name .. " " .. JSON.decode(baddie.getGMNotes()).updatedHealth .. " health remaining!"
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
  end
  baddie.setDescription("Health is " .. JSON.decode(baddie.getGMNotes()).updatedHealth)
  if JSON.decode(baddie.getGMNotes()).updatedHealth <= 0 then
    baddie.setDescription("Health is " .. JSON.decode(baddie.getGMNotes()).health)
    guid = JSON.decode(baddie.getGMNotes()).guid
    attack = JSON.decode(baddie.getGMNotes()).attack
    initiative = JSON.decode(baddie.getGMNotes()).initiative
    health = JSON.decode(baddie.getGMNotes()).health
    name = JSON.decode(baddie.getGMNotes()).name
    baddiePoints = JSON.decode(baddie.getGMNotes()).baddiePoints

    baddie.setGMNotes(JSON.encode({
      guid = guid,
      attack = attack,
      initiative = initiative,
      health = health,
      updatedHealth = health,
      name = name,
      baddiePoints = baddiePoints,
      type = JSON.decode(baddie.getGMNotes()).type
    }))
    defeatBaddie(baddie, index)
  end
end

function defeatBaddie(baddie, index)
    if baddie.getJoints() ~= nil then
      baddie.jointTo()
    end
    msg = "Removed " .. index .." health from " .. JSON.decode(baddie.getGMNotes()).name .. " and " .. JSON.decode(baddie.getGMNotes()).name .. " Has been defeated!"
    rgb = {r=0, g=1, b=0}
    broadcastToAll(msg, rgb)
    lanePosition = JSON.decode(laneToken.getGMNotes()).originalPosition
    laneToken.setPositionSmooth(lanePosition)
    baddieInitiativeDie = getObjectFromGUID(JSON.decode(laneToken.getGMNotes()).baddieInitiativeDieGUID)
    baddieInitiativeDie.setPositionSmooth(Vector(JSON.decode(baddieInitiativeDie.getGMNotes()).originalPosition))
    if JSON.decode(baddie.getGMNotes()).baddiePoints == 1 then
      onePointGraveyard = getObjectFromGUID('687de8')
      onePointGraveyard.putObject(baddie)
    elseif JSON.decode(baddie.getGMNotes()).baddiePoints == 5 then
      fivePointGraveyard = getObjectFromGUID('e2e0d3')
      fivePointGraveyard.putObject(baddie)
    elseif JSON.decode(baddie.getGMNotes()).baddiePoints == 20 then
      twentyPointGraveyard = getObjectFromGUID('1a94cc')
      twentyPointGraveyard.putObject(baddie)
    end
end

function getLaneToken(hoverObject)
  hitList = findHitsInRadius(hoverObject, 1.2, 2, 'laneToken')
  for i, bad in ipairs(hitList) do
    if bad.hit_object.getName() == "Lane" then
      return bad.hit_object
    end
  end
end

function getBaddieToken(hoverObject)
  hitList = findHitsInRadius(hoverObject, 1.2, 2, 'baddie')
  for i, bad in ipairs(hitList) do
    if bad.hit_object ~= nil then
      if #bad.hit_object.getGMNotes() > 0 and JSON.decode(bad.hit_object.getGMNotes()).type == "baddie" then
        return bad.hit_object
      end
    end
  end
end

function getAllyToken(hoverObject)
  hitList = findHitsInRadius(hoverObject, 1.2, 2, 'ally')
  for i, bad in ipairs(hitList) do
    if bad.hit_object ~= nil then
      if #bad.hit_object.getGMNotes() > 0 and JSON.decode(bad.hit_object.getGMNotes()).type == "ally" then
        return bad.hit_object
      end
    end
  end
end

function getGearlockToken(hoverObject)
  hitList = findHitsInRadius(hoverObject, 1.2, 2, 'gearlock')
  for i, bad in ipairs(hitList) do
    if bad.hit_object ~= nil then
      if #bad.hit_object.getGMNotes() > 0 and JSON.decode(bad.hit_object.getGMNotes()).type == "gearlock" then
        return bad.hit_object
      end
    end
  end
end

function getHealthStack(hoverObject)
  hitList = findHitsInRadius(hoverObject, 1.2, 2, 'baddie')
  for i, bad in ipairs(hitList) do
    if bad.hit_object.getName() == "Health" then
      return bad.hit_object
    end
  end
end

function take_callback(object_spawned)
  object_spawned.destruct()
end

function findHitsInRadius(pos, ypos, size, reason)
  local radius = (radius or 1)
  local hitList = Physics.cast({
      origin       = {x=pos.x, y=11, z=pos.z},
      direction    = {0,1,0},
      type         = 3,
      size         = {size,20,size},
      max_distance = 0,
      debug        = false,
  })
  pos.y = 1
  return hitList
end

function setSelectedPlayers()
  selectedPlayers = {
    playerOneSelected,
    playerTwoSelected,
    playerThreeSelected,
    playerFourSelected
  }
end

function setReturnDiceZones()
  returnDiceZones = {
    getObjectFromGUID('94620f'),
    getObjectFromGUID('2e35e8'),
    getObjectFromGUID('fab9a6'),
    getObjectFromGUID('f036bb')
  }
end
