function onload()
  setBaddieInitiativeDice()
  setGearlockInitiativeDiceValues()
  setGearlockInitiativeDice()
  setLaneObjects()
  setBaddieQueue()
  setBaddies()
  setInitiativePositions()
  setLaneObjectsPositions()
  self.createButton(setInitiativeBtn)
end

-- step 1 // set baddie initiativeDieValue
local runSetGearlockInitiativeDieValue = 0
function setBaddieInitiativeDieValue()
  for i, baddieQueuePos in ipairs(baddieQueuesPosition) do
    local baddie = getObjectFromGUID(findHitsInRadius(baddieQueuePos, 1.2, 2, 'guid'))
    if baddie ~= nill then
      pos = lane[i].getPosition()
      pos.y = pos.y + 2
      baddie.setPositionSmooth(pos)
      local setGearlockInitiativeDieValue = function() setGearlockInitiativeDieValue() runSetGearlockInitiativeDieValue = runSetGearlockInitiativeDieValue + 1 end
      moveWatch = function() return not baddie.isSmoothMoving() end
      Wait.condition(setGearlockInitiativeDieValue, moveWatch)
    end
  end
  runSetGearlockInitiativeDieValue = 0
end

-- step 2 // set gearlock initiativeDieValue
function setGearlockInitiativeDieValue()
  if runSetGearlockInitiativeDieValue <= 0 then
    for i, gearlockInitiativeDie in ipairs(availableGearlockInititiativeDice) do
      gearlockInitiativeDie.roll()
      local addGearlockInitiativeDieToTable = function() addGearlockInitiativeDieToTable(gearlockInitiativeDie, #availableGearlockInititiativeDice) end
      rollWatch = function() return gearlockInitiativeDie.resting end
      Wait.condition(addGearlockInitiativeDieToTable, rollWatch)
    end
  end
  runSetInitiativeMeter = 0
end

-- step 3 // add gearlock initiativeDieValue to initiativeDice table
local runAddBaddieInitiativeDieToTable = 0
function addGearlockInitiativeDieToTable(gearlockInitiativeDie, numberOfGearlockInitiativeDie)
  runAddBaddieInitiativeDieToTable = runAddBaddieInitiativeDieToTable + 1
  for i, availableGearlockInititiativeDie in ipairs(gearlockInitiativeDice) do
    gearlockInitiativeDieGuid = JSON.decode(availableGearlockInititiativeDie).guid
    if gearlockInitiativeDieGuid == gearlockInitiativeDie.getGUID() then
      gearlockInitiativeDie.setValue(gearlockInitiativeDie.getValue())
      gearlockInitiativeDie.setGMNotes(JSON.encode({
        value = JSON.decode(availableGearlockInititiativeDie).gearlockDie[gearlockInitiativeDie.getValue()],
        type = JSON.decode(availableGearlockInititiativeDie).type,
        name = JSON.decode(availableGearlockInititiativeDie).name
      }))
      print(JSON.decode(availableGearlockInititiativeDie).name .. ' has rolled ' .. gearlockInitiativeDie.getValue() .. ' and initiative has been set to ' .. JSON.decode(availableGearlockInititiativeDie).gearlockDie[gearlockInitiativeDie.getValue()])
      table.insert(initiativeDice, gearlockInitiativeDie)
    end
  end
  if runAddBaddieInitiativeDieToTable == numberOfGearlockInitiativeDie then
    Wait.time(addBaddieInitiativeDieToTable, 0.5)
  end
end

-- step 4 // add baddie initiativeDieValue to initiativeDice table
baddieQueue = {}
function addBaddieInitiativeDieToTable()
  for i, lane in ipairs(lane) do
    baddie = findHitsInRadius(lane.getPosition(), 1.2, 2, 'baddie')
    table.insert(baddieQueue, baddie)
    if baddie ~= nill then
      print(JSON.decode(baddie.getGMNotes()).initiative, JSON.decode(baddie.getGMNotes()).type, JSON.decode(baddie.getGMNotes()).name)
      baddieInitiativeDice[i].setValue(JSON.decode(baddie.getGMNotes()).initiative)
      baddieInitiativeDice[i].setGMNotes(JSON.encode({
        originalPosition = Vector(JSON.decode(baddieInitiativeDice[i].getGMNotes()).originalPosition),
        value = JSON.decode(baddie.getGMNotes()).initiative,
        type = JSON.decode(baddie.getGMNotes()).type,
        name = JSON.decode(baddie.getGMNotes()).name
      }))
      table.insert(initiativeDice, baddieInitiativeDice[i])
    end
    if i == 4 then
      sortInitiativeMeter()
      setBattleMat = getObjectFromGUID('b4586d')
      setBattleMat.call('initiatieBattleMat', baddieQueue)
    end
  end
end

-- step 5 // sort initiativeDice table from high to low with ties in favor of gearlock
function sortInitiativeMeter()
  table.sort(initiativeDice, customSort)
  createInitiativeMeter()
end

-- step 6 // move all initiative dice to the initiative track in order
local runSetInitiativeMeter = 0
function createInitiativeMeter()
  setIninitiativeTracker = getObjectFromGUID('0dc670')
  setIninitiativeTracker.setVar('enable', true)
  if runSetInitiativeMeter <= 0 then
    for i, initiativeDie in ipairs(initiativeDice) do
      local position = initiativePositions[i + 1].getPosition()
      position.y = position.y + 6
      initiativeDie.setPositionSmooth(position)
      position.y = 0
    end
  end
end

-- step 7 // get all the dice objects and pass them to the setIninitiativeTracker object to create the Initiative Tracker
function addDieFromInitiativeMeter()
  initiativeMeterDice = {}
  setInitiativePositions()
  setIninitiativeTracker = getObjectFromGUID('0dc670')
  for i, initiativePosition in ipairs(initiativePositions) do
    if i > 1 then
      intitiativeDie = findHitsInRadius(initiativePosition.getPosition(), 1, 1, 'die')
      if intitiativeDie ~= nil then
        table.insert(initiativeMeterDice, intitiativeDie)
      end
      if i == 9 then
        setIninitiativeTracker.call('updateInitiativeMeter', initiativeMeterDice)
      end
    end
  end
end

runPrintTiedInitiativeValue = 0
function customSort(a, b)
  if JSON.decode(a.getGMNotes()).value == JSON.decode(b.getGMNotes()).value then
    if JSON.decode(a.getGMNotes()).type == 'gearlock' and JSON.decode(b.getGMNotes()).type == 'gearlock' then
      if runPrintTiedInitiativeValue <= 0 then
        print('----')
        print('Some gearlocks have tied initiative, please set the tied gearlocks order manually in the initiative meter if needed')
        print('----')
        runPrintTiedInitiativeValue = 1
      end
    end
  end
  if JSON.decode(a.getGMNotes()).value == JSON.decode(b.getGMNotes()).value then
      return JSON.decode(a.getGMNotes()).type == 'gearlock' and JSON.decode(b.getGMNotes()).type ~= 'gearlock'
  else
      return JSON.decode(a.getGMNotes()).value > JSON.decode(b.getGMNotes()).value
  end
end

function roll(dieObject)
  dieObject.addTorque( {math.random()*3600, math.random()*5400, math.random()*3600} )
end

function findHitsInRadius(pos, ypos, size, reason)
  pos.y = 1
  pos.y = pos.y + ypos
  local radius = (radius or 1)
  local hitList = Physics.cast({
      origin       = {x=pos.x, y=pos.y, z=pos.z},
      direction    = {0,1,0},
      type         = 3,
      size         = {size,size,size},
      max_distance = 0,
      debug        = false,
  })
  pos.y = 1
  for _, hit in ipairs(hitList) do
    if reason == 'baddie' then
      return hit.hit_object
    elseif reason == 'guid' then
      return JSON.decode(hit.hit_object.getGMNotes()).guid
    elseif reason == 'value' then
      return JSON.decode(hit.hit_object.getGMNotes()).value
    elseif reason == 'die' then
      return hit.hit_object
    end
  end
end

function setInitiativePositions()
  initiativePositions = {
    getObjectFromGUID('fdab05'),
    getObjectFromGUID('7ab4bb'),
    getObjectFromGUID('634099'),
    getObjectFromGUID('7ad94b'),
    getObjectFromGUID('01124a'),
    getObjectFromGUID('6bda36'),
    getObjectFromGUID('dffb26'),
    getObjectFromGUID('e86414'),
    getObjectFromGUID('1dcd7e')
  }
end

function setLaneObjects()
  lane = {
    getObjectFromGUID('e37ccf'),
    getObjectFromGUID('2a9f73'),
    getObjectFromGUID('fd1416'),
    getObjectFromGUID('cc47f5')
  }
end

function setLaneObjectsPositions()
  for i, laneChip in ipairs(lane) do
    laneChip.setGMNotes(JSON.encode({
      originalPosition = laneChip.getPosition(),
      baddieInitiativeDieGUID = baddieInitiativeDice[i].getGUID()
    }))
  end
end

function setBaddieQueue()
  baddieQueuesPosition = {
    getObjectFromGUID('54c5d6').getPosition(),
    getObjectFromGUID('2bd8ff').getPosition(),
    getObjectFromGUID('3590ab').getPosition(),
    getObjectFromGUID('2af659').getPosition(),
  }
end

function setBaddieInitiativeDice()
  baddieInitiativeDice = {
    getObjectFromGUID('7c1582'),
    getObjectFromGUID('4d2834'),
    getObjectFromGUID('3aaaf7'),
    getObjectFromGUID('28d12b'),
  }
  setBaddieInitiativeDicePosition()
end

function setBaddieInitiativeDicePosition()
  for i, baddieInitiativeDie in ipairs(baddieInitiativeDice) do
    pos = baddieInitiativeDie.getPosition()
    baddieInitiativeDice[i].setGMNotes(JSON.encode({
      originalPosition = pos,
    }))
  end
end

function setBaddies()
  x = getObjectFromGUID('4e5b7b')
  x.setGMNotes(JSON.encode({
    guid = '4e5b7b',
    initiative = 2,
    health = 3,
    attack = 'melee',
    name = 'Troll Romper'
  }))
  baddie1 = x.getGMNotes()
  baddie1 = JSON.decode(baddie1)

  x = getObjectFromGUID('a855a5')
  x.setGMNotes(JSON.encode({
    guid = 'a855a5',
    initiative = 1,
    health = 3,
    attack = 'melee',
    name = 'Troll Brute'
  }))
  baddie2 = x.getGMNotes()
  baddie2 = JSON.decode(baddie2)

  x = getObjectFromGUID('fe4785')
  x.setGMNotes(JSON.encode({
    guid = 'fe4785',
    initiative = 3,
    health = 4,
    attack = 'melee',
    name = 'Troll YoungUn'
  }))
  baddie3 = x.getGMNotes()
  baddie3 = JSON.decode(baddie3)

  x = getObjectFromGUID('f84b03')
  x.setGMNotes(JSON.encode({
    guid = 'f84b03',
    initiative = 4,
    health = 3,
    attack = 'ranged',
    name = 'Orc Scout'
  }))
  baddie4 = x.getGMNotes()
  baddie4 = JSON.decode(baddie4)

  x = getObjectFromGUID('3212e1')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '3212e1',
    initiative = 5,
    health = 3,
    attack = 'ranged',
    name = 'Orc Scout'
  }))
  baddie5 = x.getGMNotes()
  baddie5 = JSON.decode(baddie5)

  x = getObjectFromGUID('23def6')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '23def6',
    initiative = 5,
    health = 3,
    attack = 'ranged',
    name = 'Orc Scout'
  }))
  baddie6 = x.getGMNotes()
  baddie6 = JSON.decode(baddie6)

  x = getObjectFromGUID('3212e1')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '3212e1',
    initiative = 5,
    health = 3,
    updatedHealth = 3,
    attack = 'ranged',
    name = 'Gobblin Bomber',
    baddiePoints = 1,
  }))
  x.setDescription("Health is " .. JSON.decode(x.getGMNotes()).health)
  baddie7 = x.getGMNotes()
  baddie7 = JSON.decode(baddie7)

  x = getObjectFromGUID('a855a5')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = 'a855a5',
    initiative = 3,
    health = 3,
    attack = 'ranged',
    name = 'Orc Scout',
    baddiePoints = 1,
  }))
  baddie8 = x.getGMNotes()
  baddie8 = JSON.decode(baddie8)

  x = getObjectFromGUID('29ef21')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '29ef21',
    initiative = 3,
    health = 3,
    updatedHealth = 3,
    attack = 'ranged',
    name = 'Bog Pole',
    baddiePoints = 1,
  }))

  x.setDescription("Health is " .. JSON.decode(x.getGMNotes()).health)
  baddie9 = x.getGMNotes()
  baddie9 = JSON.decode(baddie9)

  x = getObjectFromGUID('28a6bf')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '28a6bf',
    initiative = 2,
    health = 5,
    updatedHealth = 5,
    attack = 'melee',
    name = 'Clay Golem',
    baddiePoints = 20,
  }))
  x.setDescription("Health is " .. JSON.decode(x.getGMNotes()).health)
  baddie10 = x.getGMNotes()
  baddie10 = JSON.decode(baddie10)

  x = getObjectFromGUID('0e1b36')
  x.setGMNotes(JSON.encode({
    type = 'baddie',
    guid = '0e1b36',
    initiative = 4,
    health = 2,
    updatedHealth = 2,
    attack = 'ranged',
    name = 'Goblin Sandbagger',
    baddiePoints = 1,
  }))
  x.setDescription("Health is " .. JSON.decode(x.getGMNotes()).health)
  baddie11 = x.getGMNotes()
  baddie11 = JSON.decode(baddie11)
end

function setGearlockInitiativeDice()
  gearlockInitiativeDice = {
    JSON.encode({
      originalPosition = 0,
      guid = '96b1fa',
      name = 'Patches',
      gearlockDie = PatchesInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'f4f615',
      name = 'Nugget',
      gearlockDie = NuggetInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'ef8dcc',
      name = 'Ghillie',
      gearlockDie = GhillieInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '85c726',
      name = 'Boomer',
      gearlockDie = BoomerInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'eef847',
      name = 'Picket',
      gearlockDie = PicketInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '545238',
      name = 'Tantrum',
      gearlockDie = TantrumInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '73e679',
      name = 'Tink',
      gearlockDie = TinkInitiativeDie,
      type = 'gearlock'
    })
  }
end

function setGearlockInitiativeDiceValues()
  BoomerInitiativeDie = {2,3,4,4,5,6}
  GhillieInitiativeDie = {3,4,4,5,5,6}
  NuggetInitiativeDie = {2,3,3,4,4,5}
  PatchesInitiativeDie = {3,3,3,3,4,4}
  PicketInitiativeDie = {2,2,3,3,3,5}
  TantrumInitiativeDie = {3,4,4,4,5,5}
  TinkInitiativeDie = {3,3,4,4,4,5}
end

initiativeDice = {}
self.setPosition({10, -1, 1.7})
setInitiativeBtn = {
  click_function = 'setBaddieInitiativeDieValue',
  function_owner = self,
  label = 'Initialize initiative meter',
  position = {2, 2, 2.5},
  width = 2800,
  height = 500,
  font_size = 240,
  index = 0
}
