function onload()
  setAllies()
  setBaddieInitiativeDice()
  setGearlockInitiativeDiceValues()
  setGearlockInitiativeDice()
  setLaneObjects()
  setBaddieQueue()
  setBaddies()
  setInitiativePositions()
  setLaneObjectsPositions()
  self.createButton(setInitiativeBtn)
end

-- step 1 // set baddie initiativeDieValue
local runSetGearlockInitiativeDieValue = 0
function setBaddieInitiativeDieValue()
  self.removeButton(0)
  self.createButton(setFinishCombatBtn)
  for i, baddieQueuePos in ipairs(baddieQueuesPosition) do
    local baddie = getObjectFromGUID(findHitsInRadius(baddieQueuePos, 1.2, 2, 'guid'))
    if baddie ~= nill then
      pos = lane[i].getPosition()
      pos.y = pos.y + 2
      baddie.setPositionSmooth(pos)
      local setGearlockInitiativeDieValue = function() setGearlockInitiativeDieValue() runSetGearlockInitiativeDieValue = runSetGearlockInitiativeDieValue + 1 end
      moveWatch = function() return not baddie.isSmoothMoving() end
      Wait.condition(setGearlockInitiativeDieValue, moveWatch)
    end
  end
  runSetGearlockInitiativeDieValue = 0
end

-- step 2 // set gearlock initiativeDieValue
function setGearlockInitiativeDieValue()
  if runSetGearlockInitiativeDieValue <= 0 then
    for i, gearlockInitiativeDie in ipairs(availableGearlockInititiativeDice) do
      gearlockInitiativeDie.setGMNotes(JSON.encode({
        originalPosition = gearlockInitiativeDie.getPosition()
      }))
      gearlockInitiativeDie.roll()
      local addGearlockInitiativeDieToTable = function() addGearlockInitiativeDieToTable(gearlockInitiativeDie, #availableGearlockInititiativeDice) end
      rollWatch = function() return gearlockInitiativeDie.resting end
      Wait.condition(addGearlockInitiativeDieToTable, rollWatch)
    end
  end
  runSetInitiativeMeter = 0
end

-- step 3 // add gearlock initiativeDieValue to initiativeDice table
local runAddBaddieInitiativeDieToTable = 0
function addGearlockInitiativeDieToTable(gearlockInitiativeDie, numberOfGearlockInitiativeDie)
  runAddBaddieInitiativeDieToTable = runAddBaddieInitiativeDieToTable + 1
  for i, availableGearlockInititiativeDie in ipairs(gearlockInitiativeDice) do
    gearlockInitiativeDieGuid = JSON.decode(availableGearlockInititiativeDie).guid
    if gearlockInitiativeDieGuid == gearlockInitiativeDie.getGUID() then
      gearlockInitiativeDie.setValue(gearlockInitiativeDie.getValue())
      gearlockInitiativeDie.setGMNotes(JSON.encode({
        originalPosition = Vector(JSON.decode(gearlockInitiativeDie.getGMNotes()).originalPosition),
        value = JSON.decode(availableGearlockInititiativeDie).gearlockDie[gearlockInitiativeDie.getValue()],
        type = JSON.decode(availableGearlockInititiativeDie).type,
        name = JSON.decode(availableGearlockInititiativeDie).name
      }))
      table.insert(initiativeDice, gearlockInitiativeDie)
    end
  end
  if runAddBaddieInitiativeDieToTable == numberOfGearlockInitiativeDie then
    Wait.time(addBaddieInitiativeDieToTable, 0.5)
  end
end

-- step 4 // add baddie initiativeDieValue to initiativeDice table
baddieQueue = {}
function addBaddieInitiativeDieToTable()
  for i, lane in ipairs(lane) do
    baddie = findHitsInRadius(lane.getPosition(), 1.2, 2, 'baddie')
    table.insert(baddieQueue, baddie)
    if baddie ~= nill then
      baddieInitiativeDice[i].setValue(JSON.decode(baddie.getGMNotes()).initiative)
      baddieInitiativeDice[i].setGMNotes(JSON.encode({
        originalPosition = Vector(JSON.decode(baddieInitiativeDice[i].getGMNotes()).originalPosition),
        value = JSON.decode(baddie.getGMNotes()).initiative,
        type = JSON.decode(baddie.getGMNotes()).type,
        name = JSON.decode(baddie.getGMNotes()).name
      }))
      table.insert(initiativeDice, baddieInitiativeDice[i])
    end
    if i == 4 then
      sortInitiativeMeter()
      setBattleMat = getObjectFromGUID('b4586d')
      setBattleMat.call('initiatieBattleMat', baddieQueue)
    end
  end
end

-- step 5 // sort initiativeDice table from high to low with ties in favor of gearlock
function sortInitiativeMeter()
  table.sort(initiativeDice, customSort)
  createInitiativeMeter()
end

-- step 6 // move all initiative dice to the initiative track in order
local runSetInitiativeMeter = 0
function createInitiativeMeter()
  setIninitiativeTracker = getObjectFromGUID('0dc670')
  setIninitiativeTracker.setVar('enable', true)
  if runSetInitiativeMeter <= 0 then
    for i, initiativeDie in ipairs(initiativeDice) do
      local position = initiativePositions[i + 1].getPosition()
      position.y = position.y + 6
      initiativeDie.setPositionSmooth(position)
      position.y = 0
    end
  end
end

-- step 7 // get all the dice objects and pass them to the setIninitiativeTracker object to create the Initiative Tracker
function addDieFromInitiativeMeter()
  initiativeMeterDice = {}
  setInitiativePositions()
  setIninitiativeTracker = getObjectFromGUID('0dc670')
  for i, initiativePosition in ipairs(initiativePositions) do
    if i > 1 then
      intitiativeDie = findHitsInRadiusInitiativeDice(initiativePosition.getPosition(), 1, 1, 'die')
      if intitiativeDie ~= nil then
        table.insert(initiativeMeterDice, intitiativeDie)
      end
      if i == 9 then
        runAddBaddieInitiativeDieToTable = 0
        initiativeDice = {}
        baddieQueue = {}
        setIninitiativeTracker.setVar('setInitiativeTracker', 0)
        setIninitiativeTracker.call('updateInitiativeMeter', initiativeMeterDice)
      end
    end
  end
end

function removeDieFromInitiativeMeterDice(obj)
  for i, die in pairs(initiativeMeterDice) do
     if die.getGUID() == obj.getGUID() then
       table.remove (initiativeMeterDice, i)
     end
  end
end

runPrintTiedInitiativeValue = 0
function customSort(a, b)
  if JSON.decode(a.getGMNotes()).value == JSON.decode(b.getGMNotes()).value then
    if JSON.decode(a.getGMNotes()).type == 'gearlock' and JSON.decode(b.getGMNotes()).type == 'gearlock' then
      if runPrintTiedInitiativeValue <= 0 then
        print('----')
        print('Some gearlocks have tied initiative, please set the tied gearlocks order manually in the initiative meter if needed')
        print('----')
        runPrintTiedInitiativeValue = 1
      end
    end
  end
  if JSON.decode(a.getGMNotes()).value == JSON.decode(b.getGMNotes()).value then
      return JSON.decode(a.getGMNotes()).type == 'gearlock' and JSON.decode(b.getGMNotes()).type ~= 'gearlock'
  else
      return JSON.decode(a.getGMNotes()).value > JSON.decode(b.getGMNotes()).value
  end
end

function roll(dieObject)
  dieObject.addTorque( {math.random()*3600, math.random()*5400, math.random()*3600} )
end

function findHitsInRadiusInitiativeDice(pos, ypos, size, reason)
  pos.y = 0.6
  pos.y = pos.y + ypos
  local radius = (radius or 1)
  local hitList = Physics.cast({
      origin       = {x=pos.x, y=pos.y, z=pos.z},
      direction    = {0,1,0},
      type         = 3,
      size         = {0.5,0.5,0.5},
      max_distance = 0,
      debug        = false,
  })
  pos.y = 1
  for _, hit in ipairs(hitList) do
    if reason == 'die' then
      return hit.hit_object
    end
  end
end

function findHitsInRadius(pos, ypos, size, reason)
  pos.y = 1
  pos.y = pos.y + ypos
  local radius = (radius or 1)
  local hitList = Physics.cast({
      origin       = {x=pos.x, y=pos.y, z=pos.z},
      direction    = {0,1,0},
      type         = 3,
      size         = {size,size,size},
      max_distance = 0,
      debug        = false,
  })
  pos.y = 1
  for _, hit in ipairs(hitList) do
    if reason == 'baddie' then
      return hit.hit_object
    elseif reason == 'guid' then
      return JSON.decode(hit.hit_object.getGMNotes()).guid
    elseif reason == 'value' then
      return JSON.decode(hit.hit_object.getGMNotes()).value
    elseif reason == 'die' then
      return hit.hit_object
    end
  end
end

function setInitiativePositions()
  initiativePositions = {
    getObjectFromGUID('fdab05'),
    getObjectFromGUID('7ab4bb'),
    getObjectFromGUID('634099'),
    getObjectFromGUID('7ad94b'),
    getObjectFromGUID('01124a'),
    getObjectFromGUID('6bda36'),
    getObjectFromGUID('dffb26'),
    getObjectFromGUID('e86414'),
    getObjectFromGUID('1dcd7e')
  }
end

function setLaneObjects()
  lane = {
    getObjectFromGUID('e37ccf'),
    getObjectFromGUID('2a9f73'),
    getObjectFromGUID('fd1416'),
    getObjectFromGUID('cc47f5')
  }
end

function setLaneObjectsPositions()
  for i, laneChip in ipairs(lane) do
    laneChip.setGMNotes(JSON.encode({
      originalPosition = laneChip.getPosition(),
      baddieInitiativeDieGUID = baddieInitiativeDice[i].getGUID()
    }))
  end
end

function setBaddieQueue()
  baddieQueuesPosition = {
    getObjectFromGUID('54c5d6').getPosition(),
    getObjectFromGUID('2bd8ff').getPosition(),
    getObjectFromGUID('3590ab').getPosition(),
    getObjectFromGUID('2af659').getPosition(),
  }
end

function setBaddieInitiativeDice()
  baddieInitiativeDice = {
    getObjectFromGUID('7c1582'),
    getObjectFromGUID('4d2834'),
    getObjectFromGUID('3aaaf7'),
    getObjectFromGUID('28d12b'),
  }
  setBaddieInitiativeDicePosition()
end

function setBaddieInitiativeDicePosition()
  for i, baddieInitiativeDie in ipairs(baddieInitiativeDice) do
    pos = baddieInitiativeDie.getPosition()
    baddieInitiativeDice[i].setGMNotes(JSON.encode({
      originalPosition = pos,
    }))
  end
end

function setBaddie(type, guid, initiative, health, attack, name, baddiePoints)
  x = getObjectFromGUID(guid)
  x.setGMNotes(JSON.encode({
    type = type,
    guid = guid,
    initiative = initiative,
    health = health,
    updatedHealth = health,
    attack = attack,
    name = name,
    baddiePoints = baddiePoints
  }))
  x.setDescription("Health is " .. JSON.decode(x.getGMNotes()).health)
end

function finishCombat()
  self.removeButton(0)
  self.createButton(setInitiativeBtn)
  finishCombatFn = getObjectFromGUID('f70e4e')
  finishCombatFn.call("finishedCombat")
end

function setBaddies()
  -- 1 point baddies
  setBaddie('baddie', '3212e1', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', '29ef21', 3, 3, 'ranged', 'Bog Pole', 1)
  setBaddie('baddie', '28a6bf', 2, 5, 'melee', 'Clay Golem', 1)
  setBaddie('baddie', '0e1b36', 4, 2, 'ranged', 'Goblin Sandbagger', 1)
  setBaddie('baddie', '97f75a', 5, 2, 'ranged', 'Dragon Welp', 1)
  setBaddie('baddie', '929081', 4, 3, 'melee', 'Kobold Greenthumb', 1)
  setBaddie('baddie', '1021b1', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', '23def6', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', '75faa0', 6, 2, 'ranged', 'Kobold Tracker', 1)
  setBaddie('baddie', '2feaab', 6, 3, 'ranged', 'Dragon Hatchling', 1)
  setBaddie('baddie', 'a6056c', 2, 5, 'melee', 'Clay Golem', 1)
  setBaddie('baddie', 'f762cf', 3, 4, 'melee', 'Bog Frog', 1)
  setBaddie('baddie', 'a773c3', 3, 3, 'melee', 'Orc Peon', 1)
  setBaddie('baddie', '4e5b7b', 2, 3, 'melee', 'Troll Romper', 1)
  setBaddie('baddie', 'a855a5', 1, 3, 'melee', 'Troll Brute', 1)
  setBaddie('baddie', 'a9d3ab', 2, 3, 'melee', 'Troll Romber', 1)
  setBaddie('baddie', 'fd2605', 1, 3, 'melee', 'Troll Brute', 1)
  setBaddie('baddie', '47e211', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', 'dba088', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', '574f6c', 6, 2, 'ranged', 'Kobold Tracker', 1)
  setBaddie('baddie', '077871', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', 'f90257', 5, 3, 'ranged', 'Goblin Bomber', 1)
  setBaddie('baddie', '55ce71', 4, 3, 'ranged', 'Koblin Rioter', 1)
  setBaddie('baddie', '520a64', 3, 4, 'melee', 'Bog Frog', 1)
  setBaddie('baddie', '0c73f2', 3, 3, 'melee', 'Orc Peon', 1)
  setBaddie('baddie', 'f84b03', 4, 3, 'ranged', 'Orc Scout', 1)
  setBaddie('baddie', 'a1e1c5', 2, 4, 'melee', 'Orc Grunt', 1)
  setBaddie('baddie', 'c3b485', 4, 3, 'ranged', 'Orc Scout', 1)
  setBaddie('baddie', 'fe4785', 3, 4, 'melee', 'Troll Young`Un', 1)
  setBaddie('baddie', '8dc052', 3, 3, 'melee', 'Dire Wolf Pup', 1)
  setBaddie('baddie', '2b4f4b', 5, 2, 'melee', 'Griffing Yearling', 1)
  setBaddie('baddie', '6a7581', 5, 2, 'melee', 'Griffing Yearling', 1)
  setBaddie('baddie', 'db36bd', 3, 3, 'melee', 'Dire Wolf Pup', 1)
  setBaddie('baddie', 'f063a9', 5, 3, 'ranged', 'Goblin Bomber', 1)

  -- 5 point baddies
  setBaddie('baddie', '6092b8', 3, 7, 'ranged', 'Stone Golem', 5)
  setBaddie('baddie', '61846e', 4, 6, 'ranged', 'Bog Lurk', 5)
  setBaddie('baddie', 'd0d177', 4, 5, 'melee', 'Goblin Sapper', 5)
  setBaddie('baddie', '6bef44', 4, 6, 'melee', 'Troll Sage', 5)
  setBaddie('baddie', '8c776f', 5, 5, 'melee', 'Griffin Howler', 5)
  setBaddie('baddie', '076793', 3, 5, 'melee', 'Kobold Elite', 5)
  setBaddie('baddie', 'edc02e', 3, 5, 'melee', 'Org Rage', 5)
  setBaddie('baddie', '326db5', 2, 5, 'melee', 'Troll Enforcer', 5)
  setBaddie('baddie', 'ee56a8', 4, 6, 'melee', 'Dire Wolf', 5)
  setBaddie('baddie', '75330e', 6, 7, 'ranged', 'Dragon Delinquent', 5)
  setBaddie('baddie', '745aa3', 6, 6, 'ranged', 'Golbom Alarmist', 5)
  setBaddie('baddie', 'e3bb16', 3, 6, 'ranged', 'Manticore', 5)
  setBaddie('baddie', '42f9e5', 3, 6, 'melee', 'kobold Fanatic', 5)
  setBaddie('baddie', '0b6120', 3, 5, 'melee', 'Org Rage', 5)
  setBaddie('baddie', '55e7df', 4, 6, 'melee', 'Org Warmongerer', 5)
  setBaddie('baddie', '96ea63', 4, 5, 'melee', 'Goblin Sapper', 5)
  setBaddie('baddie', '576e6d', 6, 6, 'ranged', 'Goblin Alarmist', 5)
  setBaddie('baddie', 'bbb122', 5, 5, 'melee', 'Griffin Howler', 5)
  setBaddie('baddie', '07b436', 4, 6, 'melee', 'Owlbear', 5)
  setBaddie('baddie', '97946c', 2, 5, 'melee', 'Troll Enforcer', 5)

  -- 20 point baddies
  setBaddie('baddie', '89735d', 6, 9, 'ranged', 'Bog Wyrm', 20)
  setBaddie('baddie', '3bb87e', 5, 8, 'ranged', 'Dragon Elder', 20)
  setBaddie('baddie', '8ac70b', 6, 8, 'melee', 'Ferocious Owlbear', 20)
  setBaddie('baddie', '5895e1', 5, 7, 'melee', 'Dire Wolf Alpha', 20)
  setBaddie('baddie', '0e81a1', 5, 8, 'melee', 'Honor Griffin', 20)
  setBaddie('baddie', 'f5a3b3', 5, 9, 'melee', 'Golden Golem', 20)
  setBaddie('baddie', '767291', 4, 8, 'ranged', 'Bone Dragon', 20)
end

function setGearlockInitiativeDice()
  gearlockInitiativeDice = {
    JSON.encode({
      originalPosition = 0,
      guid = '96b1fa',
      name = 'Patches',
      gearlockDie = PatchesInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'f4f615',
      name = 'Nugget',
      gearlockDie = NuggetInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'ef8dcc',
      name = 'Ghillie',
      gearlockDie = GhillieInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '85c726',
      name = 'Boomer',
      gearlockDie = BoomerInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = 'eef847',
      name = 'Picket',
      gearlockDie = PicketInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '545238',
      name = 'Tantrum',
      gearlockDie = TantrumInitiativeDie,
      type = 'gearlock'}),
    JSON.encode({
      originalPosition = 0,
      guid = '73e679',
      name = 'Tink',
      gearlockDie = TinkInitiativeDie,
      type = 'gearlock'
    })
  }
end

function setAllies()
  allies = {
    getObjectFromGUID('305ba5'),
    getObjectFromGUID('5c955a'),
    getObjectFromGUID('883f9d'),
    getObjectFromGUID('c3a89c'),
    getObjectFromGUID('3fc165'),
    getObjectFromGUID('f5ae23'),
    getObjectFromGUID('d3c291')
  }
  setAlliesGmNotes()
end


function setAlliesGmNotes()
  for i, ally in ipairs(allies) do
    ally.setGMNotes(JSON.encode({
      originalPosition = Vector(ally.getPosition()),
      type = 'ally',
      name = allieNames[ally.getGUID()],
      initiativeDie = allesInitiativeDice[ally.getGUID()],
      owner = allyOwner[ally.getGUID()],
    }))
  end
end

allieNames = {
  ['305ba5'] = 'Nightshade',
  ['5c955a'] = 'Grumble Spiderbot 1.0',
  ['883f9d'] = 'Gatling Spiderbot 2.0',
  ['c3a89c'] = 'Jericho Spiderbot 3.0',
  ['3fc165'] = 'Talon Companion',
  ['f5ae23'] = 'Growls Companion',
  ['d3c291'] = 'Lil Yeti Companion',
}

allesInitiativeDice = {
  ['5c955a'] = 'a4b93c',
  ['883f9d'] = 'c8bb38',
  ['c3a89c'] = '1216bb',
  ['3fc165'] = 'e3e544',
  ['f5ae23'] = '503b13',
  ['d3c291'] = '0c3d69',
}

allyOwner = {
  ['5c955a'] = 'Tink',
  ['883f9d'] = 'Tink',
  ['c3a89c'] = 'Tink',
  ['3fc165'] = 'Ghillie',
  ['f5ae23'] = 'Ghillie',
  ['d3c291'] = 'Ghillie',
}

function setGearlockInitiativeDiceValues()
  BoomerInitiativeDie = {2,3,4,4,5,6}
  GhillieInitiativeDie = {3,4,4,5,5,6}
  NuggetInitiativeDie = {2,3,3,4,4,5}
  PatchesInitiativeDie = {3,3,3,3,4,4}
  PicketInitiativeDie = {2,2,3,3,3,5}
  TantrumInitiativeDie = {3,4,4,4,5,5}
  TinkInitiativeDie = {3,3,4,4,4,5}
end

initiativeDice = {}
setInitiativeBtn = {
  click_function = 'setBaddieInitiativeDieValue',
  function_owner = self,
  label = 'Initialize combat',
  position = {2, 2, 2.5},
  width = 2000,
  height = 500,
  font_size = 240,
  index = 0
}

setFinishCombatBtn = {
  click_function = 'finishCombat',
  function_owner = self,
  label = 'Finish combat',
  position = {2, 2, 2.5},
  width = 2000,
  height = 500,
  font_size = 240,
  index = 0
}
